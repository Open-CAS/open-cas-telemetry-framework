/*
 * Copyright(c) 2012-2018 Intel Corporation
 * SPDX-License-Identifier: BSD-3-Clause
 */
syntax = "proto3";
option cc_generic_services = true;
package octf.proto;
import "defs.proto";
import "opts.proto";

message PluginStatus {
    enum State {
        UNDEFINED = 0 [
            (opts_enumval).cli_desc = "Undefined plugin status",
            (opts_enumval).cli_switch = "UNDEFINED"
        ];

        CONNECTED = 1 [
            (opts_enumval).cli_desc = "Plugin connected",
            (opts_enumval).cli_switch = "CONNECTED"
        ];

        DISCONNECTED = 2 [
            (opts_enumval).cli_desc = "Plugin disconnected",
            (opts_enumval).cli_switch = "DISCONNECTED"
        ];

        ERROR = 3 [
            (opts_enumval).cli_desc = "Error occurred",
            (opts_enumval).cli_switch = "ERROR"
        ];
    }

    NodeId id = 1;

    string description = 2;

    State state = 3;

    string error = 4;
}

message PluginsList {
    repeated PluginStatus status = 1;
}

/*
 * @interface iotrace service CLI interface for plugins management
 */
service InterfaceService {
    option (opts_interface).cli = true;
    option (opts_interface).version = 1;

    /**
     * @brief Registers plugin to service
     *
     * @param NodeId Unique ID of plugin (node).
     */
    rpc registerPlugin(NodeId) returns (Void) {
        option (opts_command).cli = false;
    }

    /**
     * @brief Unregisters plugin
     *
     * @param NodeId Unique ID of plugin (node).
     */
    rpc unregisterPlugin(NodeId) returns (Void) {
        option (opts_command).cli = false;
    }

    /**
     * @brief Connects plugin to the service
     *
     * @param NodeId Unique ID of plugin (node).
     *
     * Connection is possible only for already registered plugins. It can be
     * used when disconnectPlugin() was called to reconnect with service.
     */
    rpc connectPlugin(NodeId) returns (Void) {
        option (opts_command).cli = false;
    }

    /**
     * @brief Disconnects plugin from service
     *
     * @param NodeId Unique ID of plugin (node).
     *
     * Disconnection from service does not remove the plugin from
     * the plugins' list maintained by service. After calling this
     * method, specified plugin should appear as Disconnected.
     * To connect to service again, connectPlugin() method should
     * be called from plugin with the same NodeId.
     */
    rpc disconnectPlugin(NodeId) returns (Void) {
        option (opts_command).cli = false;
    }

    /**
     * @brief List available plugins and show their status
     *
     * @return List of plugins' with statuses
     */
    rpc listPlugins(Void) returns (PluginsList) {
        option (opts_command).cli = true;
        option (opts_command).cli_short_key = "L";
        option (opts_command).cli_long_key = "list-plugins";
        option (opts_command).cli_desc = "List plugins and show plugins status";
    }
}
