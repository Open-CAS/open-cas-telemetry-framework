/*
 * Copyright(c) 2012-2018 Intel Corporation
 * SPDX-License-Identifier: BSD-3-Clause-Clear
 */
syntax = "proto3";
option cc_generic_services = true;
package octf.proto.trace;

/**
 * @brief Generic trace event
 */
message EventHeader {
    /** Event sequence ID */
    uint64 sid = 1;

    /** Time stamp */
    uint64 timestamp = 2;
}

/**
 *  @brief Device description event - provides mapping between
 *  device id and name
 */
message EventDeviceDescription {
    /** Device Id */
    uint64 id = 1;

    /** Device Name */
    string name = 2;

    /** Device size in sectors */
    uint64 size = 3;
}

/** @brief IO operation direction */
enum IoType {
    Read = 0;
    Write = 1;
    Discard = 2;
}

enum FsEventType {
    Create = 0;
    Delete = 1;
    MoveTo = 2;
    MoveFrom = 3;
    Access = 4;
}

/**
 * @brief IO trace event
 */
message EventIo {
    /** Address of IO in sectors */
    uint64 lba = 1;

    /** Size of IO in sectors */
    uint32 len = 2;

    /** IO class of IO */
    uint32 ioClass = 3;

    /** Device ID */
    uint64 deviceId = 4;

    /** Operation type: read, write, trim */
    IoType operation = 5;

    /** Flush flag */
    bool flush = 6;

    /** FUA flag */
    bool fua = 7;

    /** Write (lifetime) hint */
    uint32 writeHint = 8;
}

/**
 * @brief IO completion trace event
 */
message EventIoCompletion {
    /** Address of completed IO in sectors */
    uint64 lba = 1;

    /** Size of completed IO in sectors */
    uint32 len = 2;

    /** Flags indicates if IO ended with an error */
    bool error = 3;

    /** Device ID */
    uint64 deviceId = 4;
}

/**
 * @brief IO trace event metadata (e.g. filesystem meta information)
 *
 * If an application works on top of a filesystem it may perform IO operations
 * to files. This structure contains meta information about IO in domain of
 * filesystem. For example it provides information about file size,
 * file offset of IO, etc.
 */
message EventIoFilesystemMeta {
    /**
     * Event sequence ID reference to IO trace event associated with this event
     */
    uint64 refSid = 1;

    /** File ID */
    uint64 fileId = 2;

    /** File offset in sectors */
    uint64 fileOffset = 3;

    /** File size in sectors */
    uint64 fileSize = 4;
};

message EventIoFilesystemFileName {
    /** Device ID */
    uint64 deviceId = 1;

    /** File ID */
    uint64 fileId = 2;

    /** File parent ID */
    uint64 fileParentId = 3;

    /** File Name */
    string fileName = 4;
}

message EventIoFilesystemFileEvent {
    /** Device ID */
    uint64 deviceId = 1;

    /** File ID */
    uint64 fileId = 2;

    /** Parent directory ID */
    uint64 parentId = 3;

    /** Type of FS event */
    FsEventType fsEventType = 4;
}

message Event {
    /** Trace event header */
    EventHeader header = 1;

    oneof EventType {
        EventIo io = 2;
        EventDeviceDescription deviceDescription = 3;
        EventIoFilesystemMeta filesystemMeta = 4;
        EventIoCompletion ioCompletion = 5;
        EventIoFilesystemFileName filesystemFileName = 6;
        EventIoFilesystemFileEvent filesystemFileEvent = 7;
    }
}
