/*
 * Copyright(c) 2012-2018 Intel Corporation
 * SPDX-License-Identifier: BSD-3-Clause-Clear
 */

syntax = "proto3";
package octf.proto;
import "opts.proto";

enum ResultCode {
    RESULT_SUCCESS = 0;

    RESULT_ERROR = -1;
}

message Void {}

message Bool {
    bool value = 1;
}

message NodeId {
    string id = 1 [
        (opts_param).cli_required = true,
        (opts_param).cli_long_key = "id",
        (opts_param).cli_desc = "Module ID"
    ];
}

message InterfaceId {
    string name = 1;

    uint32 version = 2;
}

message NodePath {
    repeated NodeId node = 1;
}

message LogTrace {
    enum Severity {
        Undefined = 0;

        // Critical errors, resulting in program's aborting or restarting
        Critical = 1;

        // Non-critical errors; no need for stopping or restarting program
        Error = 2;

        // Important information about normal program's execution
        Information = 3;

        // Extended information available when verbose logging is enabled
        Verbose = 4;

        // All debug and verbose information
        Debug = 5;
    };

    // Time date stamp when trace was generated
    string timestamp = 1;

    // Name of system which generated trace
    string system = 2;

    // Trace severity
    Severity severity = 3;

    // Trace message
    string trace = 4;
}

enum OutputFormat {
    // TODO: validate working
    option (opts_enum_param).cli_enum.default_value = 0;
    option (opts_enum_param).cli_required = false;
    option (opts_enum_param).cli_short_key = "f";
    option (opts_enum_param).cli_long_key = "format";
    option (opts_enum_param).cli_desc = "Format of printed output";

    JSON = 0 [
        (opts_enumval).cli_desc = "JSON output",
        (opts_enumval).cli_switch = "json"
    ];

    CSV = 1 [
        (opts_enumval).cli_desc = "CSV output",
        (opts_enumval).cli_switch = "csv"
    ];
}
