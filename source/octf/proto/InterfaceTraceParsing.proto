/*
 * Copyright(c) 2012-2020 Intel Corporation
 * SPDX-License-Identifier: BSD-3-Clause
 */

syntax = "proto3";
option cc_generic_services = true;
import "defs.proto";
import "opts.proto";
import "statistics.proto";
import "trace.proto";
package octf.proto;

message ParseTraceRequest {
    string tracePath = 1 [
        (opts_param).cli_required = true,
        (opts_param).cli_long_key = "path",
        (opts_param).cli_short_key = "p",
        (opts_param).cli_desc = "Path to trace"
    ];

    OutputFormat format = 2;

    bool raw = 3 [
        (opts_param).cli_required = false,
        (opts_param).cli_long_key = "raw",
        (opts_param).cli_short_key = "r",
        (opts_param).cli_desc =
            "Present trace as it had been recorded without post processing"
    ];
}

enum ExtensionType {
    option (opts_enum_param).cli_enum.default_value = 0;
    option (opts_enum_param).cli_required = true;
    option (opts_enum_param).cli_short_key = "t";
    option (opts_enum_param).cli_long_key = "extension-type";
    option (opts_enum_param).cli_desc = "Extension type";

    LRU = 0 [
        (opts_enumval).cli_desc = "It simulates LRU cache and "
                                  "checks if an IO is a hit",
        (opts_enumval).cli_switch = "lru"
    ];

    LFU = 1 [
        (opts_enumval).cli_desc = "It simulates LFU cache and "
                                  "checks if an IO is a hit",
        (opts_enumval).cli_switch = "lfu"
    ];
}

message BuildExtensionsRequest {
    string tracePath = 1 [
        (opts_param).cli_required = true,
        (opts_param).cli_long_key = "path",
        (opts_param).cli_short_key = "p",
        (opts_param).cli_desc = "Path to trace"
    ];

    OutputFormat format = 2;

    ExtensionType extensionType = 3;
}

message GetLbaHistogramRequest {
    string tracePath = 1 [
        (opts_param).cli_required = true,
        (opts_param).cli_long_key = "path",
        (opts_param).cli_short_key = "p",
        (opts_param).cli_desc = "Path to trace"
    ];

    OutputFormat format = 2;

    uint32 bucketSize = 3 [
        (opts_param).cli_required = false,
        (opts_param).cli_long_key = "bucket-size",
        (opts_param).cli_short_key = "b",
        (opts_param).cli_desc =
            "Size of bucket in which lba hits are aggregated"
    ];

    int64 subrangeStart = 4 [
        (opts_param).cli_num.min = 0,
        (opts_param).cli_num.max = 9223372036854775807,
        (opts_param).cli_required = false,
        (opts_param).cli_long_key = "subrange-start",
        (opts_param).cli_short_key = "s",
        (opts_param).cli_desc =
            "Start of LBA subrange to consider exclusively in histogram"
    ];

    int64 subrangeEnd = 5 [
        (opts_param).cli_num.min = 0,
        (opts_param).cli_num.max = 9223372036854775807,
        (opts_param).cli_required = false,
        (opts_param).cli_long_key = "subrange-end",
        (opts_param).cli_short_key = "e",
        (opts_param).cli_desc =
            "End of LBA subrange to consider exclusively in histogram"
    ];
}

message GetTraceStatisticsRequest {
    string tracePath = 1 [
        (opts_param).cli_required = true,
        (opts_param).cli_long_key = "path",
        (opts_param).cli_short_key = "p",
        (opts_param).cli_desc = "Path to trace"
    ];

    OutputFormat format = 2;
}

message ListDevicesResponse {
    repeated trace.EventDeviceDescription devices = 1;
}

service InterfaceTraceParsing {
    option (opts_interface).cli = true;

    option (opts_interface).version = 1;

    option (opts_interface).cli_long_key = "trace-parser";

    option (opts_interface).cli_short_key = "P";

    option (opts_interface).cli_desc = "Parses traces";

    rpc ParseTrace(ParseTraceRequest) returns (Void) {
        option (opts_command).cli = true;

        option (opts_command).cli_long_key = "io";

        option (opts_command).cli_short_key = "P";

        option (opts_command).cli_desc =
            "Parses IO trace to human readable form";
    }

    rpc GetTraceStatistics(GetTraceStatisticsRequest)
        returns (IoStatisticsSet) {
        option (opts_command).cli = true;

        option (opts_command).cli_long_key = "statistics";
        option (opts_command).cli_short_key = "S";
        option (opts_command).cli_desc = "Returns basic IO statistics";
    }

    rpc GetLatencyHistogram(GetTraceStatisticsRequest)
        returns (IoHistogramSet) {
        option (opts_command).cli = true;

        option (opts_command).cli_long_key = "latency-histogram";
        option (opts_command).cli_short_key = "L";
        option (opts_command).cli_desc = "Returns latency histogram";
    }

    rpc GetLbaHistogram(GetLbaHistogramRequest) returns (IoHistogramSet) {
        option (opts_command).cli = true;
        option (opts_command).cli_long_key = "lba-histogram";
        option (opts_command).cli_short_key = "B";
        option (opts_command).cli_desc = "Returns a histogram of LBA hits";
    }

    rpc GetSizeHistogram(GetTraceStatisticsRequest) returns (IoHistogramSet) {
        option (opts_command).cli = true;
        option (opts_command).cli_long_key = "io-size-histogram";
        option (opts_command).cli_short_key = "I";
        option (opts_command).cli_desc = "Returns a histogram of request sizes";
    }

    rpc GetQueueDepthHistogram(GetTraceStatisticsRequest)
        returns (IoHistogramSet) {
        option (opts_command).cli = true;
        option (opts_command).cli_long_key = "queue-depth-histogram";
        option (opts_command).cli_short_key = "Q";
        option (opts_command).cli_desc =
            "Returns a hisgogram of request queue depth";
    }

    rpc GetFileSystemStatistics(GetTraceStatisticsRequest)
        returns (FilesystemStatistics) {
        option (opts_command).cli = true;
        option (opts_command).cli_long_key = "fs-statistics";
        option (opts_command).cli_short_key = "F";
        option (opts_command).cli_desc = "Returns filesystem statistics";
    }

    rpc GetDeviceList(GetTraceStatisticsRequest) returns (ListDevicesResponse) {
        option (opts_command).cli = true;
        option (opts_command).cli_long_key = "devices";
        option (opts_command).cli_short_key = "D";
        option (opts_command).cli_desc =
            "Returns a list of devices which had been traced";
    }

    rpc BuildExtensions(BuildExtensionsRequest) returns (Void) {
        option (opts_command).cli = true;
        option (opts_command).cli_long_key = "extensions";
        option (opts_command).cli_short_key = "X";
        option (opts_command).cli_desc =
            "Builds selected extensions for given trace";
    }
}
