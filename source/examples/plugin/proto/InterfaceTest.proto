/*
 * Copyright(c) 2012-2018 Intel Corporation
 * SPDX-License-Identifier: BSD-3-Clause
 */
syntax = "proto3";
option cc_generic_services = true;
import "opts.proto";
package octf.proto;

enum TestSwitch {
    // Default CLI options for this enumerator
    option (opts_enum_param).cli_short_key = "T";
    option (opts_enum_param).cli_long_key = "test";
    option (opts_enum_param).cli_desc = "Test switch";
    option (opts_enum_param).cli_enum.default_value = 1;
    option (opts_enum_param).cli_required = true;

    TEST_FOO = 0 [
        (opts_enumval).cli_desc = "Option foo description",
        (opts_enumval).cli_switch = "foo"
    ];

    TEST_BAR = 1 [
        (opts_enumval).cli_desc = "Option bar description",
        (opts_enumval).cli_switch = "bar"
    ];
}

message HelloWorldRequest {
    string hello = 1 [
        // this parameter is required to be set by user in terminal command line
        (opts_param).cli_required = true,

        // this parameter can be set by using -L <VALUE> option
        (opts_param).cli_short_key = "L",

        // this parameter can be set by using --hello <VALUE> option
        (opts_param).cli_long_key = "hello",

        // this is help for this parameter
        (opts_param).cli_desc = "Say hello"
    ];

    int32 hi = 2 [
        (opts_param).cli_short_key = "I",
        (opts_param).cli_long_key = "hi",
        (opts_param).cli_desc = "Say Hi",

        (opts_param).cli_num.min = 100, // defines minimum value of parameter
        (opts_param).cli_num.max = 200, // defines maximum value of parameter
        (opts_param).cli_num.default_value = 150 // sets default value
    ];

    string welcome = 3 [
        (opts_param).cli_short_key = "W",
        (opts_param).cli_long_key = "welcome",
        (opts_param).cli_desc = "Say welcome",
        (opts_param).cli_str.default_value = "Say welcome default value"
    ];

    // No CLI options, it uses option defined in enumerator
    TestSwitch switch = 4;

    // CLI options in enumerator are ignored and used in place option
    TestSwitch otherSwitch = 5 [
        (opts_param).cli_required = true,
        (opts_param).cli_short_key = "O",
        (opts_param).cli_long_key = "other",
        (opts_param).cli_desc = "Other test switch"
    ];

    // Boolean value in CLI is presented as basic parameter (switch) w/o value
    // CLI syntax for selecting this switch (flag) is: --flag
    bool switchFlag = 6 [
        (opts_param).cli_short_key = "F",
        (opts_param).cli_long_key = "flag",
        (opts_param).cli_desc = "Switch flag parameter"
    ];
}

message HelloWorldResponse {
    string helloResp = 1 [
        // defines name of parameter displayed in user's terminal
        (opts_param).cli_desc = "Hello Response"
    ];

    int32 hiResp = 2 [
        // defines name of parameter displayed in user's terminal
        (opts_param).cli_desc = "Hi Response"
    ];

    TestSwitch enumResponse = 3 [
        // defines name of parameter displayed in user's terminal
        (opts_param).cli_desc = "Some Enumerator Response"
    ];
}

service InterfaceTest {
    // Enables this interface in CLI
    option (opts_interface).cli = true;

    // Specifies version of interface, if missed, version is set to 0 by default
    option (opts_interface).version = 1;

    // Example method
    rpc HelloWorld(HelloWorldRequest) returns (HelloWorldResponse) {
        // Now this command can be executed by auto CLI
        option (opts_command).cli = true;

        // this command can be invoked when typing '-W'
        option (opts_command).cli_short_key = "W";

        // this command can be invoked when typing "--hello-world"
        option (opts_command).cli_long_key = "hello-world";

        // description of command displayed when printing help
        option (opts_command).cli_desc = "This is hello world method help";
    }
}
